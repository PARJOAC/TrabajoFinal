package controlador;

import bd.DAOProductos;
import bd.DAOUsuarios;
import constructores.Producto;
import constructores.Usuario;
import enumeraciones.Categoria;
import enumeraciones.Marca;
import enumeraciones.TipoUsuario;
import util.ErrorDialogo;
import util.MiExcepcion;
import vista.VistaAdministrador;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;

/**
 * Controlador para la vista del administrador. Gestiona las acciones
 * relacionadas con usuarios y productos.
 */
public class ControladorAdministrador implements ActionListener {

	// Instancias necesarias para acceder a vista y DAOs
	private final VistaAdministrador vista;
	private final DAOProductos daoProductos;
	private final DAOUsuarios daoUsuarios;

	/**
	 * Constructor: vincula vista, DAOs y asigna listeners.
	 */
	public ControladorAdministrador(VistaAdministrador vista) {
		this.vista = vista;
		this.daoProductos = new DAOProductos();
		this.daoUsuarios = new DAOUsuarios();

		// Asignación de botones a ActionListener
		vista.getBotonCrear().addActionListener(this);
		vista.getBotonBuscar().addActionListener(this);
		vista.getBotonAgregarProducto().addActionListener(this);
		vista.getBotonModificarProducto().addActionListener(this);
		vista.getBotonEliminarProducto().addActionListener(this);

		// Carga inicial de datos
		cargarUsuariosEnTabla();
		cargarProductosEnTabla();
	}

	/**
	 * Manejo de eventos según el botón presionado.
	 */
	@Override
	public void actionPerformed(ActionEvent e) {
		Object fuente = e.getSource();

		if (fuente == vista.getBotonCrear())
			crearUsuario();
		else if (fuente == vista.getBotonBuscar())
			buscarUsuario();
		else if (fuente == vista.getBotonAgregarProducto())
			agregarProducto();
		else if (fuente == vista.getBotonModificarProducto())
			modificarProducto();
		else if (fuente == vista.getBotonEliminarProducto())
			eliminarProducto();
	}

	// ========================= MÉTODOS DE USUARIO =========================

	/**
	 * Crea un nuevo usuario usando los campos del formulario.
	 */
	private void crearUsuario() {
		String nombre = vista.getCampoUsuario().getText().trim();
		String contrasena = new String(vista.getCampoContrasena().getPassword()).trim();
		TipoUsuario tipo = (TipoUsuario) vista.getComboTipoUsuario().getSelectedItem();

		if (nombre.isEmpty() || contrasena.isEmpty()) {
			ErrorDialogo.errorDialogo("Rellena todos los campos");
			return;
		}

		try {
			daoUsuarios.crearUsuario(new Usuario(nombre, contrasena, tipo));
			cargarUsuariosEnTabla();
			limpiarFormularioUsuarios();
		} catch (MiExcepcion ex) {
			ErrorDialogo.errorDialogo("Error al crear usuario: " + ex.getMessage());
		}
	}

	/**
	 * Filtra y muestra usuarios que coincidan con el texto del campo de búsqueda.
	 */
	private void buscarUsuario() {
		String texto = vista.getCampoBuscar().getText().trim().toLowerCase();
		try {
			List<Usuario> lista = daoUsuarios.listarUsuarios();
			DefaultTableModel modelo = vista.getModeloTabla();
			modelo.setRowCount(0); // Limpia la tabla

			for (Usuario u : lista) {
				if (u.getNombre().toLowerCase().contains(texto)) {
					modelo.addRow(new Object[] { u.getNombre(), u.getTipoUsuario().getDescripcionUsuario() });
				}
			}
		} catch (MiExcepcion e) {
			ErrorDialogo.errorDialogo("Error al buscar usuario: " + e.getMessage());
		}
	}

	/**
	 * Carga todos los usuarios en la tabla de la vista.
	 */
	private void cargarUsuariosEnTabla() {
		try {
			List<Usuario> lista = daoUsuarios.listarUsuarios();
			DefaultTableModel modelo = vista.getModeloTabla();
			modelo.setRowCount(0);

			for (Usuario u : lista) {
				modelo.addRow(new Object[] { u.getNombre(), u.getTipoUsuario().getDescripcionUsuario() });
			}
		} catch (MiExcepcion e) {
			ErrorDialogo.errorDialogo("Error al cargar usuarios: " + e.getMessage());
		}
	}

	/**
	 * Limpia el formulario de creación de usuarios.
	 */
	private void limpiarFormularioUsuarios() {
		vista.getCampoUsuario().setText("");
		vista.getCampoContrasena().setText("");
		vista.getComboTipoUsuario().setSelectedIndex(0);
	}

	// ========================= MÉTODOS DE PRODUCTO =========================

	/**
	 * Agrega un nuevo producto con los datos del formulario.
	 */
	private void agregarProducto() {
		try {
			Producto producto = obtenerProductoDesdeFormulario();
			daoProductos.crearProducto(producto);
			cargarProductosEnTabla();
			limpiarFormularioProducto();
		} catch (MiExcepcion | NumberFormatException e) {
			ErrorDialogo.errorDialogo("Error al añadir producto: " + e.getMessage());
		}
	}

	/**
	 * Modifica un producto seleccionado en la tabla, usando los datos del
	 * formulario.
	 */
	private void modificarProducto() {
		int fila = vista.getTablaProductos().getSelectedRow();
		if (fila == -1) {
			ErrorDialogo.errorDialogo("Selecciona un producto");
			return;
		}

		String id = vista.getModeloProductos().getValueAt(fila, 0).toString();

		try {
			Producto producto = obtenerProductoDesdeFormulario();
			producto.setId(id);
			daoProductos.modificarProducto(producto);
			cargarProductosEnTabla();
			limpiarFormularioProducto();
		} catch (MiExcepcion | NumberFormatException e) {
			ErrorDialogo.errorDialogo("Error al modificar producto: " + e.getMessage());
		}
	}

	/**
	 * Elimina el producto seleccionado de la tabla y la base de datos.
	 */
	private void eliminarProducto() {
		int fila = vista.getTablaProductos().getSelectedRow();
		if (fila == -1) {
			ErrorDialogo.errorDialogo("Selecciona un producto");
			return;
		}

		String id = vista.getModeloProductos().getValueAt(fila, 0).toString();

		try {
			daoProductos.eliminarProducto(id);
			cargarProductosEnTabla();
			limpiarFormularioProducto();
		} catch (MiExcepcion e) {
			ErrorDialogo.errorDialogo("Error al eliminar producto: " + e.getMessage());
		}
	}

	/**
	 * Carga todos los productos en la tabla de productos.
	 */
	private void cargarProductosEnTabla() {
		try {
			DefaultTableModel modelo = vista.getModeloProductos();
			modelo.setRowCount(0);
			List<Producto> productos = daoProductos.listarProductos();

			for (Producto p : productos) {
				modelo.addRow(new Object[] { p.getId(), p.getNombre(), p.getPrecio(), p.getUnidades(),
						p.getFechaCaducidad(), p.getCategoria().getDescripcionCategoria(),
						p.getMarca().getNombreMarca(), p.isEnVenta() ? "Disponible" : "No disponible" });
			}
		} catch (MiExcepcion e) {
			ErrorDialogo.errorDialogo("Error al cargar productos: " + e.getMessage());
		}
	}

	/**
	 * Crea un objeto Producto con los datos del formulario.
	 */
	private Producto obtenerProductoDesdeFormulario() throws NumberFormatException, MiExcepcion {
		String nombre = vista.getCampoNombreProducto().getText().trim();
		String precioStr = vista.getCampoPrecioProducto().getText().trim();
		String unidadesStr = vista.getCampoUnidadesProducto().getText().trim();
		String fecha = vista.getCampoFechaProducto().getText().trim();
		String descripcion = vista.getCampoDescripcionProducto().getText().trim();
		Categoria categoria = (Categoria) vista.getComboCategoriaProducto().getSelectedItem();
		Marca marca = (Marca) vista.getComboMarcaProducto().getSelectedItem();
		boolean enVenta = vista.getCheckEnVenta().isSelected();

		// Conversión de strings numéricos
		double precio = Double.parseDouble(precioStr);
		int unidades = Integer.parseInt(unidadesStr);

		return new Producto(nombre, precio, descripcion, categoria, marca, unidades, enVenta, fecha);
	}

	/**
	 * Limpia el formulario de creación/modificación de productos.
	 */
	private void limpiarFormularioProducto() {
		vista.getCampoNombreProducto().setText("");
		vista.getCampoPrecioProducto().setText("");
		vista.getCampoUnidadesProducto().setText("");
		vista.getCampoFechaProducto().setText("");
		vista.getCampoDescripcionProducto().setText("");
		vista.getComboCategoriaProducto().setSelectedIndex(0);
		vista.getComboMarcaProducto().setSelectedIndex(0);
		vista.getCheckEnVenta().setSelected(true);
	}

}
