package bd;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

import util.MiExcepcion;

public class DAOCajeros {

    // Crea una factura nueva y devuelve su ID generado autom치ticamente
    public int crearFactura(int idUsuario, double total, double iva, double efectivo, double cambio) throws SQLException, ClassNotFoundException, MiExcepcion {
        String sql = "INSERT INTO facturas (fecha, usuarioResponsable, total, iva, efectivo, cambio) VALUES (NOW(), ?, ?, ?, ?, ?)";

        // Se abre la conexi칩n y se prepara la sentencia SQL
        try (Connection conn = BDConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {

            // Se asignan los valores a los par치metros de la sentencia
            stmt.setInt(1, idUsuario);
            stmt.setDouble(2, total);
            stmt.setDouble(3, iva);
            stmt.setDouble(4, efectivo);
            stmt.setDouble(5, cambio);
            stmt.executeUpdate();

            // Se obtiene el ID de la factura insertada
            try (ResultSet rs = stmt.getGeneratedKeys()) {
                if (rs.next()) {
                    return rs.getInt(1);  // Devuelve el ID generado
                } else {
                    throw new SQLException("No se pudo obtener el ID de la factura generada.");
                }
            }
        }
    }

    // Inserta un producto dentro del detalle de una factura
    public void insertarDetalle(int idFactura, int idProducto, String nombreProducto, double precioUnitario, int cantidad, double subtotal) throws SQLException, ClassNotFoundException, MiExcepcion {
        String sql = "INSERT INTO detalles_factura (idFactura, idProducto, nombreProducto, precioUnitario, cantidad, subtotal) VALUES (?, ?, ?, ?, ?, ?)";

        // Se establece la conexi칩n y se ejecuta la sentencia
        try (Connection conn = BDConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {

            stmt.setInt(1, idFactura);
            stmt.setInt(2, idProducto);
            stmt.setString(3, nombreProducto);
            stmt.setDouble(4, precioUnitario);
            stmt.setInt(5, cantidad);
            stmt.setDouble(6, subtotal);
            stmt.executeUpdate();
        }
    }

    // Devuelve una lista de strings que resumen cada producto dentro de una factura
    public List<String> listarDetallesFactura(int idFactura) throws SQLException, ClassNotFoundException, MiExcepcion {
        List<String> lista = new ArrayList<>();
        String sql = "SELECT nombreProducto, precioUnitario, cantidad, subtotal FROM detalles_factura WHERE idFactura = ?";

        // Se recuperan todos los detalles de productos asociados a la factura
        try (Connection conn = BDConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {

            stmt.setInt(1, idFactura);
            try (ResultSet rs = stmt.executeQuery()) {
                while (rs.next()) {
                    String nombre = rs.getString("nombreProducto");
                    double precio = rs.getDouble("precioUnitario");
                    int cantidad = rs.getInt("cantidad");
                    double subtotal = rs.getDouble("subtotal");

                    // Redondeo manual a 2 decimales sin usar String.format
                    precio = Math.round(precio * 100.0) / 100.0;
                    subtotal = Math.round(subtotal * 100.0) / 100.0;

                    String detalle = nombre + " - " + precio + " x" + cantidad + " = " + subtotal;
                    lista.add(detalle);
                }
            }
        }

        return lista;
    }
}
