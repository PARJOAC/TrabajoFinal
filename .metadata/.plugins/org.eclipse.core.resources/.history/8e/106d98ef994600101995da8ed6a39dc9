package bd;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

import modelo.Factura;
import util.MiExcepcion;

/**
 * Clase DAOFacturas que gestiona todas las operaciones relacionadas con las
 * facturas en la base de datos.
 */
public class DAOFacturas {

	/**
	 * Crea una nueva factura en la base de datos y devuelve su ID generado
	 * automáticamente.
	 *
	 * @param idUsuario ID del usuario que realiza la venta
	 * @param total     Total de la factura
	 * @param iva       Importe de IVA
	 * @param efectivo  Cantidad pagada en efectivo
	 * @param cambio    Cantidad devuelta al cliente
	 * @return ID generado de la nueva factura
	 */
	public int crearFactura(int idUsuario, double total, double iva, double efectivo, double cambio)
			throws SQLException, ClassNotFoundException, MiExcepcion {

		// Consulta SQL que inserta una nueva factura con la fecha actual
		String sql = "INSERT INTO facturas (fecha, usuarioResponsable, total, efectivo, cambio) VALUES (NOW(), ?, ?, ?, ?)";

		// Se establece la conexión y se prepara la sentencia
		try (Connection con = BDConnection.getConnection();
				PreparedStatement stmt = con.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {

			// Asignación de parámetros a la sentencia
			stmt.setInt(1, idUsuario);
			stmt.setDouble(2, total);
			stmt.setDouble(3, efectivo);
			stmt.setDouble(4, cambio);

			// Ejecución de la sentencia
			stmt.executeUpdate();

			// Recuperación del ID generado automáticamente
			try (ResultSet rs = stmt.getGeneratedKeys()) {
				if (rs.next()) {
					return rs.getInt(1); // Retorna el ID de la nueva factura
				} else {
					throw new SQLException("No se pudo obtener el ID de la factura generada.");
				}
			}
		}
	}

	/**
	 * Inserta un producto en el detalle de una factura ya existente.
	 *
	 * @param idFactura      ID de la factura
	 * @param idProducto     ID del producto vendido
	 * @param nombreProducto Nombre del producto
	 * @param precioUnitario Precio unitario del producto
	 * @param cantidad       Cantidad vendida
	 * @param subtotal       Precio total (precio x cantidad)
	 */
	public void insertarDetalle(int idFactura, int idProducto, String nombreProducto, double precioUnitario,
			int cantidad, double subtotal) throws SQLException, ClassNotFoundException, MiExcepcion {

		// Consulta SQL para insertar un detalle de producto en una factura
		String sql = "INSERT INTO factura_detalles (idFactura, idProducto, nombreProducto, precioUnitario, cantidad, subtotal) VALUES (?, ?, ?, ?, ?, ?)";

		// Preparación de la conexión y la sentencia
		try (Connection conn = BDConnection.getConnection(); PreparedStatement stmt = conn.prepareStatement(sql)) {

			// Asignación de parámetros a la sentencia
			stmt.setInt(1, idFactura);
			stmt.setInt(2, idProducto);
			stmt.setString(3, nombreProducto);
			stmt.setDouble(4, precioUnitario);
			stmt.setInt(5, cantidad);
			stmt.setDouble(6, subtotal);

			// Ejecución de la inserción
			stmt.executeUpdate();
		}
	}

	/**
	 * Devuelve una lista de facturas con información básica de cada una (para
	 * mostrar en un panel resumen).
	 *
	 * @return Lista de objetos FacturaResumen ordenados por fecha descendente
	 */
	public List<Factura> listarFacturas() throws SQLException, ClassNotFoundException, MiExcepcion {

		// Lista donde se almacenarán las facturas recuperadas
		List<Factura> lista = new ArrayList<>();

		// Consulta SQL que une la tabla facturas con usuarios para obtener datos
		// legibles
		String sql = """
				    SELECT f.idFactura, u.nombreUsuario AS usuario, f.total, f.efectivo, f.cambio, f.fecha
				    FROM facturas f
				    JOIN usuarios u ON f.usuarioResponsable = u.idUsuario
				    ORDER BY f.fecha DESC
				""";

		// Ejecución de la consulta y llenado de la lista
		try (Connection conn = BDConnection.getConnection();
				PreparedStatement stmt = conn.prepareStatement(sql);
				ResultSet rs = stmt.executeQuery()) {

			while (rs.next()) {
				// Se crea un resumen por cada resultado
				lista.add(new Factura(rs.getInt("idFactura"), rs.getString("usuario"), rs.getDouble("total"),
						rs.getDouble("efectivo"), rs.getDouble("cambio"),
						rs.getTimestamp("fecha").toString()));
			}
		}

		// Se retorna la lista completa
		return lista;
	}

	/**
	 * Devuelve los detalles de productos de una factura en forma de textos
	 * legibles.
	 *
	 * @param idFactura ID de la factura cuyos productos se quieren consultar
	 * @return Lista de strings con el formato: "nombre - precio x cantidad =
	 *         subtotal"
	 */
	public List<String> listarDetallesFactura(int idFactura) throws SQLException, ClassNotFoundException, MiExcepcion {

		// Lista para almacenar los detalles en formato texto
		List<String> lista = new ArrayList<>();

		// Consulta SQL para recuperar los productos vendidos en una factura concreta
		String sql = "SELECT nombreProducto, precioUnitario, cantidad, subtotal FROM factura_detalles WHERE idFactura = ?";

		try (Connection conn = BDConnection.getConnection(); PreparedStatement stmt = conn.prepareStatement(sql)) {

			// Se asigna el ID de factura a la sentencia
			stmt.setInt(1, idFactura);

			try (ResultSet rs = stmt.executeQuery()) {
				while (rs.next()) {
					// Se construye un string legible con los datos del producto
					double precioUnitario = Math.round(rs.getDouble("precioUnitario") * 100.0) / 100.0;
					double subtotal = Math.round(rs.getDouble("subtotal") * 100.0) / 100.0;

					String detalle = rs.getString("nombreProducto") + " - "
						+ precioUnitario + " € x "
						+ rs.getInt("cantidad") + " = "
						+ subtotal + " €";

					lista.add(detalle);
				}
			}
		}

		// Se devuelve la lista de detalles
		return lista;
	}

}
