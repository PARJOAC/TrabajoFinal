package bd;

import constructores.Usuario;
import enumeraciones.TipoUsuario;
import util.Contrasena;
import util.MiExcepcion;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

/**
 * DAO para gestionar las operaciones de base de datos relacionadas con los
 * usuarios.
 */
public class DAOUsuarios {

	/**
	 * Crea un nuevo usuario en la base de datos.
	 *
	 * @param usuario Objeto Usuario con los datos a insertar
	 * @return true si la inserción fue exitosa, false en caso contrario
	 * @throws MiExcepcion Si ocurre un error de conexión o de datos
	 */
	public boolean crearUsuario(Usuario usuario) throws MiExcepcion {
		String sql = "INSERT INTO usuarios (nombreUsuario, contrasena, tipo) VALUES (?, ?, ?)";

		try (Connection con = BDConnection.getConnection(); PreparedStatement ps = con.prepareStatement(sql)) {

			// Asignación de parámetros a la sentencia SQL
			ps.setString(1, usuario.getNombre());
			ps.setString(2, usuario.getPassword()); // Se asume que ya viene cifrada
			ps.setString(3, usuario.getTipoUsuario().name());

			// Devuelve true si se insertó al menos una fila
			return ps.executeUpdate() > 0;

		} catch (SQLException | ClassNotFoundException e) {
			// En caso de error, se imprime y retorna false
			System.err.println("Error al insertar usuario: " + e.getMessage());
			return false;
		}
	}

	/**
	 * Busca un usuario por su nombre de usuario (principalmente para el login).
	 *
	 * @param nombre Nombre de usuario a buscar
	 * @return Objeto Usuario si se encuentra, null si no existe
	 * @throws MiExcepcion Si ocurre un error en la búsqueda
	 */
	public Usuario buscarUsuario(String nombre) throws MiExcepcion {
		String sql = "SELECT idUsuario, nombreUsuario, contrasena, tipo FROM usuarios WHERE nombreUsuario = ?";

		try (Connection con = BDConnection.getConnection(); PreparedStatement ps = con.prepareStatement(sql)) {

			ps.setString(1, nombre);

			try (ResultSet rs = ps.executeQuery()) {
				if (rs.next()) {
					// Se extraen los datos del usuario
					int id = rs.getInt("idUsuario");
					String password = rs.getString("contrasena");
					String tipo = rs.getString("tipo");

					// Se devuelve el usuario con la contraseña descifrada
					return new Usuario(id, nombre, Contrasena.descifrar(password), TipoUsuario.valueOf(tipo));
				}
			}

		} catch (SQLException | ClassNotFoundException e) {
			e.printStackTrace();
			throw new MiExcepcion("Error al buscar usuario: " + e.getMessage());
		}

		return null;
	}

	/**
	 * Lista todos los usuarios de la base de datos. Útil para la vista del
	 * administrador.
	 *
	 * @return Lista con todos los usuarios registrados
	 * @throws MiExcepcion Si ocurre un error durante la consulta
	 */
	public List<Usuario> listarUsuarios() throws MiExcepcion {
		List<Usuario> lista = new ArrayList<>();
		String sql = "SELECT idUsuario, nombreUsuario, contrasena, tipo FROM usuarios";

		try (Connection con = BDConnection.getConnection();
				PreparedStatement stmt = con.prepareStatement(sql);
				ResultSet rs = stmt.executeQuery()) {

			// Se recorre el resultado y se crea un objeto Usuario por cada fila
			while (rs.next()) {
				int id = rs.getInt("idUsuario");
				String nombre = rs.getString("nombreUsuario");
				String password = rs.getString("contrasena");
				String tipo = rs.getString("tipo");

				// Se añade el usuario a la lista (contraseña cifrada tal cual en este caso)
				Usuario usuario = new Usuario(id, nombre, password, TipoUsuario.valueOf(tipo));
				lista.add(usuario);
			}

		} catch (SQLException | ClassNotFoundException e) {
			e.printStackTrace();
			throw new MiExcepcion("Error al listar usuarios: " + e.getMessage());
		}

		return lista;
	}
}
