package bd;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

import util.MiExcepcion;

public class DAOCajeros {

    /**
     * Inserta una nueva factura en la tabla 'facturas' y devuelve el ID generado automáticamente.
     *
     * @param idUsuario    ID del usuario responsable
     * @param total        Importe total de la factura
     * @param iva          IVA aplicado
     * @param efectivo     Cantidad pagada por el cliente
     * @param cambio       Vuelto a devolver al cliente
     * @return             ID de la factura generada
     */
    public int crearFactura(int idUsuario, double total, double iva, double efectivo, double cambio)
            throws SQLException, ClassNotFoundException, MiExcepcion {

        // Sentencia SQL para insertar una nueva factura con la fecha actual y los datos recibidos
        String sql = "INSERT INTO facturas (fecha, usuarioResponsable, total, iva, efectivo, cambio) VALUES (NOW(), ?, ?, ?, ?, ?)";

        // Se obtiene la conexión y se prepara la sentencia, solicitando que devuelva claves generadas (ID)
        try (Connection conn = BDConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {

            // Se establecen los valores de los parámetros en la sentencia preparada
            stmt.setInt(1, idUsuario);
            stmt.setDouble(2, total);
            stmt.setDouble(3, iva);
            stmt.setDouble(4, efectivo);
            stmt.setDouble(5, cambio);

            // Se ejecuta la inserción en la base de datos
            stmt.executeUpdate();

            // Se obtiene el ID generado automáticamente por la base de datos
            try (ResultSet rs = stmt.getGeneratedKeys()) {
                if (rs.next()) {
                    return rs.getInt(1); // Devuelve el ID de la factura
                } else {
                    throw new SQLException("No se pudo obtener el ID de la factura generada.");
                }
            }
        }
    }

    /**
     * Inserta un nuevo detalle de producto asociado a una factura concreta.
     *
     * @param idFactura      ID de la factura a la que pertenece el producto
     * @param idProducto     ID del producto
     * @param nombreProducto Nombre del producto
     * @param precioUnitario Precio por unidad del producto
     * @param cantidad       Número de unidades compradas
     * @param subtotal       Total parcial (precio x cantidad)
     */
    public void insertarDetalle(int idFactura, int idProducto, String nombreProducto, double precioUnitario,
                                 int cantidad, double subtotal)
            throws SQLException, ClassNotFoundException, MiExcepcion {

        // Sentencia SQL para insertar el detalle de factura
        String sql = "INSERT INTO detalles_factura (idFactura, idProducto, nombreProducto, precioUnitario, cantidad, subtotal) VALUES (?, ?, ?, ?, ?, ?)";

        // Se establece la conexión y se prepara la sentencia
        try (Connection conn = BDConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {

            // Se asignan los parámetros a la sentencia preparada
            stmt.setInt(1, idFactura);
            stmt.setInt(2, idProducto);
            stmt.setString(3, nombreProducto);
            stmt.setDouble(4, precioUnitario);
            stmt.setInt(5, cantidad);
            stmt.setDouble(6, subtotal);

            // Se ejecuta la inserción
            stmt.executeUpdate();
        }
    }

    /**
     * Recupera los detalles de una factura específica y los devuelve como una lista de descripciones en texto.
     *
     * @param idFactura ID de la factura cuyos detalles se desean obtener
     * @return Lista de strings con la descripción de cada producto en el detalle de la factura
     */
    public List<String> listarDetallesFactura(int idFactura)
            throws SQLException, ClassNotFoundException, MiExcepcion {

        // Lista donde se almacenarán los detalles formateados
        List<String> lista = new ArrayList<>();

        // Sentencia SQL para obtener los detalles de la factura
        String sql = "SELECT nombreProducto, precioUnitario, cantidad, subtotal FROM detalles_factura WHERE idFactura = ?";

        // Se realiza la conexión y preparación de la sentencia
        try (Connection conn = BDConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {

            // Se establece el ID de la factura en la consulta
            stmt.setInt(1, idFactura);

            // Se ejecuta la consulta y se recorren los resultados
            try (ResultSet rs = stmt.executeQuery()) {
                while (rs.next()) {
                    // Se extraen los campos de cada fila
                    String nombre = rs.getString("nombreProducto");
                    double precio = rs.getDouble("precioUnitario");
                    int cantidad = rs.getInt("cantidad");
                    double subtotal = rs.getDouble("subtotal");

                    // Redondeo manual a 2 decimales (evitando String.format)
                    precio = Math.round(precio * 100.0) / 100.0;
                    subtotal = Math.round(subtotal * 100.0) / 100.0;

                    // Se crea una línea de texto con la información del producto
                    String detalle = nombre + " - " + precio + " x" + cantidad + " = " + subtotal;

                    // Se añade a la lista
                    lista.add(detalle);
                }
            }
        }

        // Se devuelve la lista de productos formateados
        return lista;
    }
}
