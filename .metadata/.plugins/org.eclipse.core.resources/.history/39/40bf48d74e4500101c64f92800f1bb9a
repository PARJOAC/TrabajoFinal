package controlador;

import bd.DAOFacturas;
import bd.DAOProductos;
import bd.DAOUsuarios;
import enumeraciones.Categoria;
import enumeraciones.Emergente;
import enumeraciones.Marca;
import enumeraciones.TipoUsuario;
import modelo.Factura;
import modelo.Producto;
import modelo.Usuario;
import util.Dialogos;
import util.MiExcepcion;
import vista.VistaAdministrador;

import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.SQLException;
import java.util.List;

/**
 * Controlador para la vista del administrador. Gestiona las acciones
 * relacionadas con usuarios y productos.
 */
public class ControladorAdministrador implements ActionListener, ListSelectionListener {

	// Instancias necesarias para acceder a vista y DAOs
	private final VistaAdministrador vista;
	private final DAOProductos daoProductos;
	private final DAOUsuarios daoUsuarios;
	private final DAOFacturas daoFacturas;

	/**
	 * Constructor: vincula vista, DAOs y asigna listeners.
	 * @throws MiExcepcion 
	 */
	public ControladorAdministrador(VistaAdministrador vista) throws MiExcepcion {
		this.vista = vista;
		this.daoProductos = new DAOProductos();
		this.daoUsuarios = new DAOUsuarios();
		this.daoFacturas = new DAOFacturas();

		// Carga inicial de datos
		cargarUsuariosEnTabla();
		cargarProductosEnTabla();
		cargarFacturasEnTabla();
	}

	/**
	 * Manejo de eventos según el botón presionado.
	 */
	@Override
	public void actionPerformed(ActionEvent e) {
		Object fuente = e.getSource();

		if (fuente == vista.getBotonCrear())
			crearUsuario();
		else if (fuente == vista.getBotonBuscar())
			buscarUsuario();
		else if (fuente == vista.getBotonAgregarProducto())
			agregarProducto();
		else if (fuente == vista.getBotonModificarProducto())
			modificarProducto();
		else if (fuente == vista.getBotonEliminarProducto())
			eliminarProducto();
	}

	/**
	 * Obtiene el listado de facturas desde la base de datos y las muestra en la
	 * tabla de la vista.
	 *
	 * @throws MiExcepcion si ocurre un error de negocio
	 */
	public void cargarFacturasEnTabla() throws MiExcepcion {
		try {
			List<Factura> facturas = daoFacturas.listarFacturas();
			DefaultTableModel modelo = vista.getModeloFacturas();
			modelo.setRowCount(0);

			for (Factura f : facturas) {
				modelo.addRow(new Object[] {
					f.getId(),
					f.getUsuario(),
					Math.round(f.getTotal() * 100.0) / 100.0,
					Math.round(f.getEfectivo() * 100.0) / 100.0,
					Math.round(f.getCambio() * 100.0) / 100.0,
					f.getFecha()
				});
			}
		} catch (SQLException | ClassNotFoundException e) {
			Dialogos.avisoDialogo(Emergente.Error, "Error al cargar las facturas: " + e.getMessage());
		}
	}

	/**
	 * Carga todos los usuarios en la tabla de la vista.
	 */
	private void cargarUsuariosEnTabla() {
		try {
			List<Usuario> lista = daoUsuarios.listarUsuarios();
			DefaultTableModel modelo = vista.getModeloTabla();
			modelo.setRowCount(0);

			lista.stream().forEach(u -> {
				String[] arrayUsuario = { u.getNombre(), u.getTipoUsuario().getDescripcionUsuario() };
				modelo.addRow(arrayUsuario);
			});

		} catch (MiExcepcion e) {
			Dialogos.avisoDialogo(Emergente.Error, "Error al cargar usuarios: " + e.getMessage());
		}
	}

	/**
	 * Limpia el formulario de creación de usuarios.
	 */
	private void limpiarFormularioUsuarios() {
		vista.getCampoUsuario().setText("");
		vista.getCampoContrasena().setText("");
		vista.getComboTipoUsuario().setSelectedIndex(0);
	}

	/**
	 * Agrega un nuevo producto con los datos del formulario.
	 */
	private void agregarProducto() {
		try {
			Producto producto = obtenerProductoDesdeFormulario();
			daoProductos.crearProducto(producto);
			cargarProductosEnTabla();
			limpiarFormularioProducto();
		} catch (MiExcepcion | NumberFormatException e) {
			Dialogos.avisoDialogo(Emergente.Error, "Error al añadir producto: " + e.getMessage());
		}
	}

	/**
	 * Modifica un producto seleccionado en la tabla, usando los datos del
	 * formulario.
	 */
	private void modificarProducto() {
		int fila = vista.getTablaProductos().getSelectedRow();
		if (fila == -1) {
			Dialogos.avisoDialogo(Emergente.Error, "Selecciona un producto");
			return;
		}

		String id = vista.getModeloProductos().getValueAt(fila, 0).toString();

		try {
			Producto producto = obtenerProductoDesdeFormulario();
			if (producto == null)
				return;
			producto.setId(id);
			daoProductos.modificarProducto(producto);
			cargarProductosEnTabla();
			limpiarFormularioProducto();
		} catch (MiExcepcion | NumberFormatException e) {
			Dialogos.avisoDialogo(Emergente.Error, "Error al modificar producto: " + e.getMessage());
		}
	}

	/**
	 * Elimina el producto seleccionado de la base de datos y actualiza la tabla.
	 */
	private void eliminarProducto() {
		int fila = vista.getTablaProductos().getSelectedRow();
		if (fila == -1) {
			Dialogos.avisoDialogo(Emergente.Error, "Selecciona un producto de la tabla para eliminar.");
			return;
		}

		String id = vista.getModeloProductos().getValueAt(fila, 0).toString();

		try {
			daoProductos.eliminarProducto(id);
			cargarTabla();
			limpiarFormulario();
		} catch (MiExcepcion ex) {
			Dialogos.avisoDialogo(Emergente.Error, "Error al eliminar un producto: " + ex.getMessage());
		}
	}

	/**
	 * Carga todos los productos en la tabla de productos.
	 */
	private void cargarProductosEnTabla() {
		try {
			DefaultTableModel modelo = vista.getModeloProductos();
			modelo.setRowCount(0);
			List<Producto> productos = daoProductos.listarProductos();

			productos.stream().forEach(p -> {
				String[] arrayProducto = { p.getId(), p.getNombre(), String.valueOf(p.getPrecio()), String.valueOf(p.getUnidades()),
					String.valueOf(p.getFechaCaducidad()).toString(), p.getCategoria().getDescripcionCategoria(),
						p.getMarca().getNombreMarca(), p.isEnVenta() ? "Disponible" : "No disponible" };
				modelo.addRow(arrayProducto);
			});
		} catch (MiExcepcion e) {
			Dialogos.avisoDialogo(Emergente.Error, "Error al cargar productos: " + e.getMessage());
		}
	}

	/**
	 * Crea un objeto Producto con los datos del formulario.
	 */
	private Producto obtenerProductoDesdeFormulario() throws NumberFormatException, MiExcepcion {
		String nombre = vista.getCampoNombreProducto().getText().trim();
		String precioStr = vista.getCampoPrecioProducto().getText().trim();
		String unidadesStr = vista.getCampoUnidadesProducto().getText().trim();
		String fecha = vista.getCampoFechaProducto().getText().trim();
		String descripcion = vista.getCampoDescripcionProducto().getText().trim();
		Categoria categoria = (Categoria) vista.getComboCategoriaProducto().getSelectedItem();
		Marca marca = (Marca) vista.getComboMarcaProducto().getSelectedItem();
		boolean enVenta = vista.getCheckEnVenta().isSelected();

		// Conversión de strings numéricos
		double precio = Double.parseDouble(precioStr);
		int unidades = Integer.parseInt(unidadesStr);

		return new Producto(nombre, precio, descripcion, categoria, marca, unidades, enVenta, fecha);
	}

	/**
	 * Limpia el formulario de creación/modificación de productos.
	 */
	private void limpiarFormularioProducto() {
		vista.getCampoNombreProducto().setText("");
		vista.getCampoPrecioProducto().setText("");
		vista.getCampoUnidadesProducto().setText("");
		vista.getCampoFechaProducto().setText("");
		vista.getCampoDescripcionProducto().setText("");
		vista.getComboCategoriaProducto().setSelectedIndex(0);
		vista.getComboMarcaProducto().setSelectedIndex(0);
		vista.getCheckEnVenta().setSelected(true);
	}
	
	/**
	 * APARTADO DE USUARIOS
	 */
	/**
	 * Crea un nuevo usuario a partir de los campos del formulario. Muestra errores
	 * si faltan datos o ocurre un problema al guardar.
	 */
	private void crearUsuario() {
		// Obtener valores del formulario
		String nombre = vista.getCampoUsuario().getText().trim();
		String contrasena = new String(vista.getCampoContrasena().getPassword()).trim();
		TipoUsuario tipoSeleccionado = (TipoUsuario) vista.getComboTipoUsuario().getSelectedItem();

		// Validar campos obligatorios
		if (nombre.isEmpty() || contrasena.isEmpty()) {
			Dialogos.avisoDialogo(Emergente.Error, "Rellena todos los campos.");
			return;
		}

		try {
			// Crear y guardar nuevo usuario
			daoUsuarios.crearUsuario(new Usuario(nombre, contrasena, tipoSeleccionado));
			limpiarFormularioUsuarios(); // Limpiar los campos
			cargarUsuariosEnTabla(); // Actualizar tabla
		} catch (MiExcepcion ex) {
			Dialogos.avisoDialogo(Emergente.Error, "Error al crear usuario: " + ex.getMessage());
		}
	}

	/**
	 * Filtra la tabla de usuarios mostrando solo aquellos que coincidan con el
	 * texto buscado.
	 */
	private void buscarUsuario() {
		String texto = vista.getCampoBuscar().getText().trim().toLowerCase(); // Texto introducido por el usuario

		try {
			List<Usuario> lista = daoUsuarios.listarUsuarios(); // Obtener lista completa
			DefaultTableModel modelo = vista.getModeloTabla();
			modelo.setRowCount(0); // Limpiar tabla

			// Añadir solo los que contienen el texto buscado
			lista.stream().filter(u -> u.getNombre().toLowerCase().contains(texto)).forEach(u -> {
				String[] arrayUsuario = { u.getNombre(), u.getTipoUsuario().getDescripcionUsuario() };
				modelo.addRow(arrayUsuario);
			});
		} catch (MiExcepcion e) {
			Dialogos.avisoDialogo(Emergente.Error, "Error al buscar el usuario: " + e.getMessage());
		}
	}
	
	@Override
	public void valueChanged(ListSelectionEvent e) {
		int fila = vista.getTablaProductos().getSelectedRow();
		if (fila == -1)
			return;

		vista.getCampoNombreProducto().setText(vista.getModeloProductos().getValueAt(fila, 1).toString());
		vista.getCampoPrecioProducto().setText(vista.getModeloProductos().getValueAt(fila, 2).toString());
		vista.getCampoUnidadesProducto().setText(vista.getModeloProductos().getValueAt(fila, 3).toString());
		vista.getCampoFechaProducto().setText(vista.getModeloProductos().getValueAt(fila, 4).toString());
		vista.getCampoDescripcionProducto().setText(vista.getModeloProductos().getValueAt(fila, 8).toString());

		// Categoría
		String categoria = vista.getModeloProductos().getValueAt(fila, 5).toString();
		for (int i = 0; i < vista.getComboCategoriaProducto().getItemCount(); i++) {
			if (vista.getComboCategoriaProducto().getItemAt(i).getDescripcionCategoria().equals(categoria)) {
				vista.getComboCategoriaProducto().setSelectedIndex(i);
				break;
			}
		}

		// Marca
		String marca = vista.getModeloProductos().getValueAt(fila, 6).toString();
		for (int i = 0; i < vista.getComboMarcaProducto().getItemCount(); i++) {
			if (vista.getComboMarcaProducto().getItemAt(i).getNombreMarca().equals(marca)) {
				vista.getComboMarcaProducto().setSelectedIndex(i);
				break;
			}
		}

		// En venta
		String estado = vista.getModeloProductos().getValueAt(fila, 7).toString();
		vista.getCheckEnVenta().setSelected(estado.equalsIgnoreCase("Disponible"));
	}	

	/**
	 * Carga todos los productos desde la base de datos y los muestra en la tabla.
	 */
	private void cargarTabla() {
		try {
			DefaultTableModel modelo = vista.getModeloProductos();
			modelo.setRowCount(0); // Limpia la tabla antes de cargar datos
			List<Producto> productos = daoProductos.listarProductos();

			// Añade cada producto como una fila nueva
			productos.stream().forEach(p -> {
				String[] arrayProducto = { p.getId(), p.getNombre(), String.valueOf(p.getPrecio()),
						String.valueOf(p.getUnidades()), String.valueOf(p.getFechaCaducidad()),
						p.getCategoria().getDescripcionCategoria(), p.getMarca().getNombreMarca(),
						p.isEnVenta() ? "Disponible" : "No disponible", p.getDescripcion() };
				modelo.addRow(arrayProducto);
			});

		} catch (MiExcepcion ex) {
			Dialogos.avisoDialogo(Emergente.Error, "Error al cargar la tabla: " + ex.getMessage());
		}
	}

	/**
	 * Construye un objeto Producto a partir de los datos introducidos en el
	 * formulario.
	 *
	 * @return Producto construido con los datos actuales de la vista
	 * @throws MiExcepcion si algún campo no es válido
	 */
	private Producto construirProductoDesdeFormulario() throws MiExcepcion {

		// Recupera todos los campos del formulario
		String nombre = vista.getCampoNombreProducto().getText().trim();
		String precioStr = vista.getCampoPrecioProducto().getText().trim();
		String unidadesStr = vista.getCampoUnidadesProducto().getText().trim();
		String fecha = vista.getCampoFechaProducto().getText().trim();
		String descripcion = vista.getCampoDescripcionProducto().getText().trim();
		Categoria categoria = (Categoria) vista.getComboCategoriaProducto().getSelectedItem();
		Marca marca = (Marca) vista.getComboMarcaProducto().getSelectedItem();
		boolean enVenta = vista.getCheckEnVenta().isSelected();

		double precio;
		int unidades;

		try {
			precio = Double.parseDouble(precioStr);
			unidades = Integer.parseInt(unidadesStr);
		} catch (NumberFormatException e) {
			return null;
		}

		// Devuelve el nuevo producto
		return new Producto(nombre, precio, descripcion, categoria, marca, unidades, enVenta, fecha);
	}

	/**
	 * Limpia todos los campos del formulario de productos.
	 */
	private void limpiarFormulario() {
		vista.getCampoNombreProducto().setText("");
		vista.getCampoPrecioProducto().setText("");
		vista.getCampoUnidadesProducto().setText("");
		vista.getCampoFechaProducto().setText("");
		vista.getCampoDescripcionProducto().setText("");
		vista.getComboCategoriaProducto().setSelectedIndex(0);
		vista.getComboMarcaProducto().setSelectedIndex(0);
		vista.getCheckEnVenta().setSelected(true);
	}

}
