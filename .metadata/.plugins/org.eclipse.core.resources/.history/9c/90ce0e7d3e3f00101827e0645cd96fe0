package bd;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

import util.MiExcepcion;

public class DAOFacturas {

    /**
     * Clase interna que representa un resumen de una factura para visualización.
     * Contiene los campos principales que suelen mostrarse en un listado general.
     */
    public static class FacturaResumen {
        public int id;
        public String usuario;
        public double total;
        public double iva;
        public double efectivo;
        public double cambio;
        public String fecha;

        // Constructor para inicializar el resumen de factura con todos sus datos
        public FacturaResumen(int id, String usuario, double total, double iva, double efectivo, double cambio, String fecha) {
            this.id = id;
            this.usuario = usuario;
            this.total = total;
            this.iva = iva;
            this.efectivo = efectivo;
            this.cambio = cambio;
            this.fecha = fecha;
        }
    }

    /**
     * Crea una nueva factura en la base de datos y devuelve su ID generado automáticamente.
     *
     * @param idUsuario ID del usuario que realiza la venta
     * @param total     Total de la factura
     * @param iva       Importe de IVA
     * @param efectivo  Cantidad pagada en efectivo
     * @param cambio    Cantidad devuelta al cliente
     * @return ID generado de la nueva factura
     */
    public int crearFactura(int idUsuario, double total, double iva, double efectivo, double cambio)
            throws SQLException, ClassNotFoundException, MiExcepcion {

        String sql = "INSERT INTO facturas (fecha, usuarioResponsable, total, iva, efectivo, cambio) VALUES (NOW(), ?, ?, ?, ?, ?)";

        // Se prepara la conexión y la sentencia SQL
        try (Connection conn = BDConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {

            // Se asignan los valores a los parámetros
            stmt.setInt(1, idUsuario);
            stmt.setDouble(2, total);
            stmt.setDouble(3, iva);
            stmt.setDouble(4, efectivo);
            stmt.setDouble(5, cambio);

            // Se ejecuta la sentencia
            stmt.executeUpdate();

            // Se recupera el ID generado automáticamente
            try (ResultSet rs = stmt.getGeneratedKeys()) {
                if (rs.next()) {
                    return rs.getInt(1); // Devuelve el ID de la factura
                } else {
                    throw new SQLException("No se pudo obtener el ID de la factura generada.");
                }
            }
        }
    }

    /**
     * Inserta un producto en el detalle de una factura ya existente.
     *
     * @param idFactura      ID de la factura
     * @param idProducto     ID del producto vendido
     * @param nombreProducto Nombre del producto
     * @param precioUnitario Precio unitario del producto
     * @param cantidad       Cantidad vendida
     * @param subtotal       Precio total (precio x cantidad)
     */
    public void insertarDetalle(int idFactura, int idProducto, String nombreProducto, double precioUnitario,
                                 int cantidad, double subtotal)
            throws SQLException, ClassNotFoundException, MiExcepcion {

        String sql = "INSERT INTO factura_detalles (idFactura, idProducto, nombreProducto, precioUnitario, cantidad, subtotal) VALUES (?, ?, ?, ?, ?, ?)";

        // Se prepara la conexión y la sentencia
        try (Connection conn = BDConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {

            // Se asignan los parámetros a la sentencia SQL
            stmt.setInt(1, idFactura);
            stmt.setInt(2, idProducto);
            stmt.setString(3, nombreProducto);
            stmt.setDouble(4, precioUnitario);
            stmt.setInt(5, cantidad);
            stmt.setDouble(6, subtotal);

            // Se ejecuta la inserción
            stmt.executeUpdate();
        }
    }

    /**
     * Devuelve una lista de facturas con información básica de cada una (para mostrar en un panel resumen).
     *
     * @return Lista de objetos FacturaResumen ordenados por fecha descendente
     */
    public List<FacturaResumen> listarFacturas()
            throws SQLException, ClassNotFoundException, MiExcepcion {

        List<FacturaResumen> lista = new ArrayList<>();

        // Consulta SQL que une las tablas facturas y usuarios para obtener el nombre del usuario
        String sql = """
            SELECT f.idFactura, u.nombreUsuario AS usuario, f.total, f.iva, f.efectivo, f.cambio, f.fecha
            FROM facturas f
            JOIN usuarios u ON f.usuarioResponsable = u.idUsuario
            ORDER BY f.fecha DESC
        """;

        // Se realiza la consulta y se recorren los resultados
        try (Connection conn = BDConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql);
             ResultSet rs = stmt.executeQuery()) {

            while (rs.next()) {
                // Se crea un objeto FacturaResumen por cada fila
                lista.add(new FacturaResumen(
                        rs.getInt("idFactura"),
                        rs.getString("usuario"),
                        rs.getDouble("total"),
                        rs.getDouble("iva"),
                        rs.getDouble("efectivo"),
                        rs.getDouble("cambio"),
                        rs.getTimestamp("fecha").toString()
                ));
            }
        }

        return lista;
    }

    /**
     * Devuelve los detalles de productos de una factura en forma de textos legibles.
     *
     * @param idFactura ID de la factura cuyos productos se quieren consultar
     * @return Lista de strings con el formato: "nombre - precio x cantidad = subtotal"
     */
    public List<String> listarDetallesFactura(int idFactura)
            throws SQLException, ClassNotFoundException, MiExcepcion {

        List<String> lista = new ArrayList<>();
        String sql = "SELECT nombreProducto, precioUnitario, cantidad, subtotal FROM factura_detalles WHERE idFactura = ?";

        try (Connection conn = BDConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {

            stmt.setInt(1, idFactura);

            try (ResultSet rs = stmt.executeQuery()) {
                while (rs.next()) {
                    // Se construye la descripción del producto en formato texto
                    String detalle = String.format(
                        "%s - %.2f € x %d = %.2f €",
                        rs.getString("nombreProducto"),
                        rs.getDouble("precioUnitario"),
                        rs.getInt("cantidad"),
                        rs.getDouble("subtotal")
                    );
                    lista.add(detalle);
                }
            }
        }

        return lista;
    }
}
