package bd;

import constructores.Producto;
import enumeraciones.Categoria;
import enumeraciones.Marca;
import util.MiExcepcion;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

/**
 * DAO para poder manejar la tabla de Productos
 */
public class DAOProductos {

	/**
	 * Método para poder crear un producto.
	 * 
	 * @param producto
	 * @throws MiExcepcion
	 */
	public void crearProducto(Producto producto) throws MiExcepcion {
		// Sentencia sql
		String sql = "INSERT INTO productos (nombre, descripcion, precio, categoria, marca, unidades, enVenta, fechaCaducidad) VALUES (?, ?, ?, ?, ?, ?, ?, ?)";

		/**
		 * Try con recursos para poder guardar en la base de datos el producto como
		 * parámetro
		 */
		try (Connection conn = BDConnection.getConnection(); PreparedStatement stmt = conn.prepareStatement(sql)) {
			stmt.setString(1, producto.getNombre());
			stmt.setString(2, producto.getDescripcion());
			stmt.setDouble(3, producto.getPrecio());
			stmt.setString(4, producto.getCategoria().name());
			stmt.setString(5, producto.getMarca().name());
			stmt.setInt(6, producto.getUnidades());
			stmt.setBoolean(7, producto.isEnVenta());
			stmt.setDate(8, Date.valueOf(producto.getFechaCaducidad()));
			stmt.executeUpdate();
		} catch (Exception e) {
			throw new MiExcepcion("Error al insertar producto: " + e.getMessage());
		}
	}

	/**
	 * Método para listar los productos
	 * 
	 * @return
	 * @throws MiExcepcion
	 */
	public List<Producto> listarProductos() throws MiExcepcion {
		// Crear un ArrayList para añadir los productos
		List<Producto> lista = new ArrayList<>();
		
		// Sentencia sql
		String sql = "SELECT * FROM productos";

		/**
		 * Try con recursos para poder obtener los productos
		 */
		try (Connection conn = BDConnection.getConnection();
				Statement stmt = conn.createStatement();
				ResultSet rs = stmt.executeQuery(sql)) {

			/**
			 * Siempre y cuando exista una siguiente línea en la base de datos, seguirá
			 * añadiendo productos
			 */
			while (rs.next()) {
				try {
					Producto productoNuevo = new Producto(
							rs.getString("nombre"),
							rs.getDouble("precio"),
							rs.getString("descripcion"),
							Categoria.valueOf(rs.getString("categoria")),
							Marca.valueOf(rs.getString("marca")),
							rs.getInt("unidades"),
							rs.getBoolean("enVenta"),
							rs.getDate("fechaCaducidad").toString());
					
					productoNuevo.setId(String.valueOf(rs.getInt("idProducto")));
					lista.add(productoNuevo);
				} catch (IllegalArgumentException e) {
					System.err.println("Ha ocurrido un error al crear listar los productos: " + e.getMessage());
				}
			}

		} catch (Exception e) {
			throw new MiExcepcion("Error al listar productos: " + e.getMessage());
		}

		// Devolver la lista
		return lista;
	}

	/**
	 * Método para eliminar un producto
	 * @param id
	 * @throws MiExcepcion
	 */
	public void eliminarProducto(String id) throws MiExcepcion {
		// Sentencia sql
		String sql = "DELETE FROM productos WHERE idProducto = ?";

		// Try con recursos
		try (Connection conn = BDConnection.getConnection();
			PreparedStatement stmt = conn.prepareStatement(sql)) {
			stmt.setInt(1, Integer.parseInt(id));
			if (stmt.executeUpdate() == 0) {
				throw new MiExcepcion("No se encontró el producto con ID: " + id);
			}
		} catch (Exception e) {
			throw new MiExcepcion("Error al eliminar producto: " + e.getMessage());
		}
	}

	/**
	 * Método para poder modificar un producto
	 * @param producto
	 * @throws MiExcepcion
	 */
	public void modificarProducto(Producto producto) throws MiExcepcion {
		// Sentencia sql
		String sql = "UPDATE productos SET nombre = ?, descripcion = ?, precio = ?, categoria = ?, marca = ?, unidades = ?, enVenta = ?, fechaCaducidad = ? WHERE idProducto = ?";

		// Try con recursos
		try (Connection conn = BDConnection.getConnection();
			PreparedStatement stmt = conn.prepareStatement(sql)) {
			stmt.setString(1, producto.getNombre());
			stmt.setString(2, producto.getDescripcion());
			stmt.setDouble(3, producto.getPrecio());
			stmt.setString(4, producto.getCategoria().name());
			stmt.setString(5, producto.getMarca().name());
			stmt.setInt(6, producto.getUnidades());
			stmt.setBoolean(7, producto.isEnVenta());
			stmt.setDate(8, Date.valueOf(producto.getFechaCaducidad()));
			stmt.setInt(9, Integer.parseInt(producto.getId()));

			if (stmt.executeUpdate() == 0) {
				throw new MiExcepcion("No se encontró el producto con ID: " + producto.getId());
			}
		} catch (Exception e) {
			throw new MiExcepcion("Error al modificar producto: " + e.getMessage());
		}
	}

	/**
	 * Buscar un Producto mediante id
	 * @param id
	 * @return
	 * @throws MiExcepcion
	 */
	public Producto buscarPorId(String id) throws MiExcepcion {
		// Sentencia sql
		String sql = "SELECT * FROM productos WHERE idProducto = ?";

		// Try con recursos
		try (Connection conn = BDConnection.getConnection();
			PreparedStatement stmt = conn.prepareStatement(sql)) {
			stmt.setInt(1, Integer.parseInt(id));
			// Try con recursos
			try (ResultSet rs = stmt.executeQuery()) {
				if (rs.next()) {
					Producto p = new Producto(
							rs.getString("nombre"),
							rs.getDouble("precio"),
							rs.getString("descripcion"),
							Categoria.valueOf(rs.getString("categoria")),
							Marca.valueOf(rs.getString("marca")),
							rs.getInt("unidades"),
							rs.getBoolean("enVenta"),
							rs.getDate("fechaCaducidad").toString());
					
					p.setId(String.valueOf(rs.getInt("idProducto")));
					return p;
				} else {
					throw new MiExcepcion("Producto no encontrado con ID: " + id);
				}
			}
		} catch (Exception e) {
			throw new MiExcepcion("Error al buscar producto: " + e.getMessage());
		}
	}

	/**
	 * Método para actualizar unidades de un producto
	 * @param id
	 * @param nuevasUnidades
	 * @throws MiExcepcion
	 */
	public void actualizarUnidades(String id, int nuevasUnidades) throws MiExcepcion {
		// Sentencia sql
		String sql = "UPDATE productos SET unidades = ? WHERE idProducto = ?";

		// Try con recursos
		try (Connection conn = BDConnection.getConnection();
			PreparedStatement stmt = conn.prepareStatement(sql)) {
			stmt.setInt(1, nuevasUnidades);
			stmt.setInt(2, Integer.parseInt(id));

			if (stmt.executeUpdate() == 0) {
				throw new MiExcepcion("No se pudo actualizar el stock del producto con ID: " + id);
			}

		} catch (Exception e) {
			throw new MiExcepcion("Error al actualizar unidades del producto: " + e.getMessage());
		}
	}
	
	public Producto buscarPorNombre(String nombre) throws MiExcepcion {
	    String sql = "SELECT * FROM productos WHERE nombre = ?";

	    try (Connection conn = BDConnection.getConnection();
	         PreparedStatement stmt = conn.prepareStatement(sql)) {
	        stmt.setString(1, nombre);
	        try (ResultSet rs = stmt.executeQuery()) {
	            if (rs.next()) {
	                Producto p = new Producto(
	                        rs.getString("nombre"),
	                        rs.getDouble("precio"),
	                        rs.getString("descripcion"),
	                        Categoria.valueOf(rs.getString("categoria")),
	                        Marca.valueOf(rs.getString("marca")),
	                        rs.getInt("unidades"),
	                        rs.getBoolean("enVenta"),
	                        rs.getDate("fechaCaducidad").toString()
	                );
	                p.setId(String.valueOf(rs.getInt("idProducto")));
	                return p;
	            } else {
	                throw new MiExcepcion("Producto no encontrado con nombre: " + nombre);
	            }
	        }
	    } catch (Exception e) {
	        throw new MiExcepcion("Error al buscar producto por nombre: " + e.getMessage());
	    }
	}


}
