package modelo;

import java.io.Serializable;
import java.time.LocalDate;
import java.util.Objects;

import enumeraciones.Categoria;
import enumeraciones.Marca;
import util.LibreriaFechas;
import util.MiExcepcion;

/**
 * Clase que representa un producto. Contiene toda la información relevante para
 * su gestión.
 */
public class Producto implements Serializable {

	// Necesario para serialización
	private static final long serialVersionUID = 585044535912349700L;

	// Atributos de instancia del producto
	private String nombre, descripcion;
	private double precio;
	private String id; // Puede ser autogenerado por la BBDD o asignado
	private Categoria categoria;
	private Marca marca;
	private int unidades;
	private boolean enVenta;
	private LocalDate fechaCaducidad;

	// Valores por defecto
	private static final String descripcionPorDefecto = "No se ha proporcionado una descripción.";
	private static final Categoria categoriaPorDefecto = Categoria.SinCategoria;
	private static final Marca marcaPorDefecto = Marca.SinMarca;
	private static final boolean enVentaPorDefecto = true;

	// ======================= CONSTRUCTORES =======================

	/**
	 * Constructor principal con todos los campos personalizables.
	 */
	public Producto(String nombreProducto, double precioProducto, String descripcionProducto,
			Categoria categoriaProducto, Marca marcaProducto, int unidadesProducto, boolean enVenta,
			String fechaCaducidad) throws MiExcepcion {
		this.nombre = nombreProducto;
		this.precio = precioProducto;
		this.descripcion = descripcionProducto;
		this.categoria = categoriaProducto;
		this.marca = marcaProducto;
		this.unidades = unidadesProducto;
		this.enVenta = enVenta;

		setFechaCaducidad(fechaCaducidad);
	}

	/**
	 * Constructor con solo los campos obligatorios.
	 */
	public Producto(String nombreProducto, double precioProducto, int unidadesProducto, String fechaCaducidad)
			throws MiExcepcion {
		this(nombreProducto, precioProducto, descripcionPorDefecto, categoriaPorDefecto, marcaPorDefecto,
				unidadesProducto, enVentaPorDefecto, fechaCaducidad);
	}

	/**
	 * Constructor con obligatorios + categoría.
	 */
	public Producto(String nombreProducto, double precioProducto, Categoria categoriaProducto, int unidadesProducto,
			String fechaCaducidad) throws MiExcepcion {
		this(nombreProducto, precioProducto, descripcionPorDefecto, categoriaProducto, marcaPorDefecto,
				unidadesProducto, enVentaPorDefecto, fechaCaducidad);
	}

	/**
	 * Constructor con obligatorios + marca.
	 */
	public Producto(String nombreProducto, double precioProducto, Marca marcaProducto, int unidadesProducto,
			String fechaCaducidad) throws MiExcepcion {
		this(nombreProducto, precioProducto, descripcionPorDefecto, categoriaPorDefecto, marcaProducto,
				unidadesProducto, enVentaPorDefecto, fechaCaducidad);
	}

	/**
	 * Constructor con obligatorios + descripción.
	 */
	public Producto(String nombreProducto, double precioProducto, String descripcionProducto, int unidadesProducto,
			String fechaCaducidad) throws MiExcepcion {
		this(nombreProducto, precioProducto, descripcionProducto, categoriaPorDefecto, marcaPorDefecto,
				unidadesProducto, enVentaPorDefecto, fechaCaducidad);
	}

	/**
	 * Constructor con obligatorios + categoría + marca.
	 */
	public Producto(String nombreProducto, double precioProducto, Categoria categoriaProducto, Marca marcaProducto,
			int unidadesProducto, String fechaCaducidad) throws MiExcepcion {
		this(nombreProducto, precioProducto, descripcionPorDefecto, categoriaProducto, marcaProducto, unidadesProducto,
				enVentaPorDefecto, fechaCaducidad);
	}

	/**
	 * Constructor con obligatorios + categoría + descripción.
	 */
	public Producto(String nombreProducto, double precioProducto, String descripcionProducto,
			Categoria categoriaProducto, int unidadesProducto, String fechaCaducidad) throws MiExcepcion {
		this(nombreProducto, precioProducto, descripcionProducto, categoriaProducto, marcaPorDefecto, unidadesProducto,
				enVentaPorDefecto, fechaCaducidad);
	}

	/**
	 * Constructor con obligatorios + categoría + marca + enVenta.
	 */
	public Producto(String nombreProducto, double precioProducto, Categoria categoriaProducto, Marca marcaProducto,
			int unidadesProducto, boolean enVenta, String fechaCaducidad) throws MiExcepcion {
		this(nombreProducto, precioProducto, descripcionPorDefecto, categoriaProducto, marcaProducto, unidadesProducto,
				enVenta, fechaCaducidad);
	}

	// MÉTODOS GETTER Y SETTER
	public String getNombre() {return nombre;}
	public void setNombre(String nombre) {this.nombre = nombre;}

	public String getDescripcion() {return descripcion;}
	public void setDescripcion(String descripcion) {this.descripcion = descripcion;}

	public double getPrecio() {return precio;}
	public void setPrecio(double precio) throws MiExcepcion {
		if (precio <= 0)
			throw new MiExcepcion("El precio debe ser mayor que 0.");
		this.precio = precio;
	}

	public String getId() {return id;}
	public void setId(String id) {this.id = id;}

	public Categoria getCategoria() {return categoria;}
	public void setCategoria(Categoria categoria) {this.categoria = categoria;}

	public Marca getMarca() {return marca;}
	public void setMarca(Marca marca) {this.marca = marca;}

	public int getUnidades() {return unidades;}
	public void setUnidades(int unidades) {this.unidades = unidades;}

	public boolean isEnVenta() {return enVenta;}
	public void setEnVenta(boolean enVenta) {this.enVenta = enVenta;}

	public LocalDate getFechaCaducidad() {return fechaCaducidad;}
	public void setFechaCaducidad(String fechaCaducidad) throws MiExcepcion {
		if (LibreriaFechas.convierteStringToLocalDate(fechaCaducidad) == null)
			throw new MiExcepcion("La fecha es incorrecta.");
		this.fechaCaducidad = LibreriaFechas.convierteStringToLocalDate(fechaCaducidad);
	}

	@Override
	public int hashCode() {return Objects.hash(categoria, descripcion, enVenta, fechaCaducidad, id, marca, nombre, precio, unidades);}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Producto other = (Producto) obj;
		return categoria == other.categoria && Objects.equals(descripcion, other.descripcion)
				&& enVenta == other.enVenta && Objects.equals(fechaCaducidad, other.fechaCaducidad)
				&& Objects.equals(id, other.id) && marca == other.marca && Objects.equals(nombre, other.nombre)
				&& Double.doubleToLongBits(precio) == Double.doubleToLongBits(other.precio)
				&& unidades == other.unidades;
	}

	@Override
	public String toString() {
		return "Producto: " + nombre +
			   "\nID: " + id +
			   "\nDescripcion: " + descripcion +
			   "\nPrecio: " + precio +
			   "\nCategoria: " + categoria +
			   "\nMarca: " + marca +
			   "\nUnidades: " + unidades +
			   "\n¿Está en venta?: " + (enVenta ? "Sí" : "No") +
			   "\nCaducidad: " + LibreriaFechas.getFechaFull(fechaCaducidad);
	}

}
